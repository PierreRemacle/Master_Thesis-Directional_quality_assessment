from _plotly_utils.utils import levenshtein
import numpy as np
import pandas as pd
from Utils import *
import matplotlib.pyplot as plt


# results = {}
# worst_results = {}
# for i in range(2, 102):
#     for itt in range(100):
#         sequence = np.arange(0, i)
#         sequence2 = sequence.copy()
#         # shuffle the sequence
#         np.random.shuffle(sequence)
#         np.random.shuffle(sequence2)
#
#         sequence = [i+1]+sequence
#         sequence2 = [i+1]+sequence2
#
#         levenshteindistance = levenshtein(sequence, sequence2)
#         if i not in results:
#             results[i] = [levenshteindistance]
#         else:
#             results[i].append(levenshteindistance)
#         if i not in worst_results:
#             worst_results[i] = [i]
#         else:
#             worst_results[i].append(i)
# # average result for random permutation of sequence
# plt.plot(results.keys(), [np.mean(results[key]) for key in results])
# # worst case
# plt.plot(results.keys(), [np.max(worst_results[key]) for key in worst_results])
# # fit a line to the data
# plt.show()
# m, p = np.polyfit(np.array(list(results.keys())), np.array(
#     [np.mean(results[key]) for key in results]), 1)
# print(m, p)
# m, p = np.polyfit(np.array(list(results.keys())), np.array(
#     [np.max(worst_results[key]) for key in worst_results]), 1)
# print(m, p)

data_coil_tsne = {0: 0.0, 1: 0.0, 2: 1.0291425818882467, 3: 1.5780659990149402, 4: 2.5379394249855927, 5: 3.2518226810707254, 6: 4.164027777777778, 7: 4.973533176431727, 8: 5.882044709164248, 9: 6.73504965837853, 10: 7.648705811259946, 11: 8.556572860447186, 12: 9.44723159719055, 13: 10.336628481711926, 14: 11.22104848023888, 15: 12.093103542756939, 16: 12.994338306321778, 17: 13.907270478646423, 18: 14.830718544085347, 19: 15.751170356264382, 20: 16.67275436932665, 21: 17.64113730929265, 22: 18.611061680204358, 23: 19.600215420518804, 24: 20.52221564903322, 25: 21.454338271202996, 26: 22.37195665592209, 27: 23.25875542691751, 28: 24.13805927232297, 29: 24.995576837235728, 30: 25.912274707439995, 31: 26.85785785785786, 32: 27.883037775703688, 33: 28.908877382159826, 34: 29.97417950829314,
                  35: 31.035788787483703, 36: 32.07328943601489, 37: 33.106983305901714, 38: 34.09152542372881, 39: 35.07999202074606, 40: 36.157540712768466, 41: 37.224080729886644, 42: 38.24884564643799, 43: 39.349409448818896, 44: 40.42278127183788, 45: 41.38960674157303, 46: 42.557291666666664, 47: 43.666666666666664, 48: 44.83561643835616, 49: 45.90198968312454, 50: 47.01121495327103, 51: 48.21201413427562, 52: 49.200927357032455, 53: 49.80232558139535, 54: 50.416, 55: 51.195402298850574, 56: 51.790055248618785, 57: 52.52777777777778, 58: 53.28695652173913, 59: 54.02970297029703, 60: 55.0, 61: 55.81395348837209, 62: 56.297872340425535, 63: 56.8, 64: 56.92553191489362, 65: 56.697916666666664, 66: 56.3974358974359, 67: 56.81967213114754, 68: 56.48888888888889, 69: 58.0, 70: 59.875, 71: 63.0, 72: 63.0}

data_coil_PCA = {0: 0.0, 1: 0.0, 2: 1.0268099681114917, 3: 1.6308751075310863, 4: 2.5909960540475905, 5: 3.3838523417065587, 6: 4.348977340235933, 7: 5.245246790406988, 8: 6.194409192248328, 9: 7.117505918484868, 10: 8.052738644644158, 11: 8.970188988356444, 12: 9.892556818181818, 13: 10.79897799620239, 14: 11.716993173872025, 15: 12.615156765215447, 16: 13.514946799527108, 17: 14.43107705406556, 18: 15.334790863586676, 19: 16.2225281094239, 20: 17.132374944990467, 21: 18.08328338527931, 22: 19.048873804381365, 23: 19.99767167416196, 24: 20.931446936814552, 25: 21.825248089623457, 26: 22.756713889189285, 27: 23.679621212121212, 28: 24.58258581509389, 29: 25.47460565822303, 30: 26.383723029701184, 31: 27.273002887391723, 32: 28.11466625045523, 33: 28.964285714285715, 34: 29.810667004497372, 35: 30.69851999430767, 36: 31.616598245190374,
                 37: 32.480525403630395, 38: 33.338010730499384, 39: 34.171076852277956, 40: 34.905308831036244, 41: 35.71074020319303, 42: 36.49800664451827, 43: 37.3046357615894, 44: 38.0718926849717, 45: 38.9343339587242, 46: 39.8276222861627, 47: 40.7417006406523, 48: 41.56840077071291, 49: 42.44310099573257, 50: 43.24113751460849, 51: 44.11053540587219, 52: 44.838725253500726, 53: 45.72336956521739, 54: 46.68622606547251, 55: 47.59236111111111, 56: 48.49651972157773, 57: 49.29736842105263, 58: 50.12576064908722, 59: 50.90389016018307, 60: 51.032, 61: 51.64586583463338, 62: 52.191605839416056, 63: 52.6057268722467, 64: 52.361477572559366, 65: 52.83024691358025, 66: 53.5387323943662, 67: 53.54621848739496, 68: 54.28395061728395, 69: 55.440677966101696, 70: 55.23456790123457, 71: 54.24074074074074, 72: 55.6, 73: 55.75, 74: 55.0}
data_coil_UMAP = {0: 0.0, 1: 0.0, 2: 1.0002342468962286, 3: 1.5550438912073679, 4: 2.478580171358629, 5: 3.1919204737732656, 6: 4.093316519546028, 7: 4.937862968487195, 8: 5.79300063683205, 9: 6.634129895350092, 10: 7.515303614395488, 11: 8.404884578471485, 12: 9.350383694820737, 13: 10.271247871564096, 14: 11.223449219418045, 15: 12.147697049538912, 16: 13.11534223406709, 17: 14.083542779348623, 18: 15.066112399072667, 19: 16.038221658019648, 20: 17.050540470049555, 21: 18.064622728107214, 22: 19.103647081686855, 23: 20.17551739626162, 24: 21.214871494471698, 25: 22.21736116459986, 26: 23.223427068581834, 27: 24.22997240500955, 28: 25.25104942450914, 29: 26.272258126748337, 30: 27.298450609975806, 31: 28.30916514925785,
                  32: 29.284235237464635, 33: 30.27600500032897, 34: 31.26290241987294, 35: 32.21919199812456, 36: 33.20732028438515, 37: 34.231211540401496, 38: 35.28982064378192, 39: 36.37102672292546, 40: 37.445544554455445, 41: 38.49884214588962, 42: 39.45343580470163, 43: 40.52497285559175, 44: 41.551423027166884, 45: 42.579567033801744, 46: 43.48337707786526, 47: 44.39053850025164, 48: 45.16570771001151, 49: 46.076470588235296, 50: 47.05637065637065, 51: 48.11727842435094, 52: 48.96734693877551, 53: 49.83732057416268, 54: 50.78115501519757, 55: 51.827586206896555, 56: 52.86375321336761, 57: 53.84355828220859, 58: 54.90875912408759, 59: 55.97115384615385, 60: 57.25174825174825, 61: 58.30434782608695, 62: 59.5, 63: 60.0, 64: 61.54545454545455, 65: 62.0}
data_coil_Isomap = {0: 0.0, 1: 0.0, 2: 0.9833610648918469, 3: 1.5749645278259499, 4: 2.4992847776850637, 5: 3.260014637716516, 6: 4.17272345782627, 7: 5.043209646804868, 8: 5.974656810982048, 9: 6.863556534789412, 10: 7.764832000980122, 11: 8.660336054904745, 12: 9.562304805019913, 13: 10.476201161192607, 14: 11.426438037600516, 15: 12.382021210930924, 16: 13.328329779673064, 17: 14.268645908761767, 18: 15.221410975573562, 19: 16.19567014728848, 20: 17.17274502897762, 21: 18.140025489669977, 22: 19.110820518185307, 23: 20.08330003269517, 24: 21.0627268212553, 25: 22.03372275081296, 26: 22.991201481855686, 27: 23.973027017419124, 28: 24.951627379658934, 29: 25.944372186093048, 30: 26.941048498355087, 31: 27.91330725180019, 32: 28.907302010171954, 33: 29.879745189807593, 34: 30.853382135566974, 35: 31.831288808117524, 36: 32.80499105836449, 37: 33.793748911718616, 38: 34.78714672138793, 39: 35.774465134706816, 40: 36.8046343537415, 41: 37.819762122598355, 42: 38.843684663633006, 43: 39.80792764032987, 44: 40.817021893576914,
                    45: 41.814173228346455, 46: 42.77550672798501, 47: 43.662863452337135, 48: 44.510499207606976, 49: 45.36693378321383, 50: 46.21532184950136, 51: 47.038193610377135, 52: 47.91091142490372, 53: 48.84746220302376, 54: 49.796771403862785, 55: 50.645111860251305, 56: 51.65053404539386, 57: 52.63510054844607, 58: 53.65717674970344, 59: 54.651632302405496, 60: 55.72709923664122, 61: 56.80280228334198, 62: 57.95154929577465, 63: 58.961444308445536, 64: 60.03703703703704, 65: 61.055679287305125, 66: 62.11769415532426, 67: 63.25998225377107, 68: 64.42445328031809, 69: 65.5912568306011, 70: 66.54166666666667, 71: 67.58086253369272, 72: 68.46307692307693, 73: 69.39032815198618, 74: 70.41010101010102, 75: 71.38574938574939, 76: 72.3627760252366, 77: 73.12260536398468, 78: 74.26415094339623, 79: 75.41071428571429, 80: 76.45270270270271, 81: 77.46212121212122, 82: 78.45714285714286, 83: 79.48, 84: 80.83928571428571, 85: 81.70454545454545, 86: 82.86666666666666, 87: 83.85, 88: 84.34782608695652, 89: 86.0, 90: 88.0}
data_coil_MDS = {0: 0.0, 1: 0.0, 2: 1.0004670714619337, 3: 1.5854802737829732, 4: 2.5751892635925673, 5: 3.333950903195924, 6: 4.292613971021321, 7: 5.141175259147388, 8: 6.092317644159684, 9: 6.9811491394172345, 10: 7.9143747853425275, 11: 8.797366367046857, 12: 9.727501939487976, 13: 10.616134541486788, 14: 11.526721504112809, 15: 12.414179104477611, 16: 13.313860897752097, 17: 14.19423541104643, 18: 15.092305851382076, 19: 15.966319984447901, 20: 16.876215277777778, 21: 17.77359454420066, 22: 18.7070183827436, 23: 19.625295936272735, 24: 20.57522019964768, 25: 21.523932850723913, 26: 22.469150291730937, 27: 23.373179013472562, 28: 24.27859061209765, 29: 25.163743214750347,
                 30: 26.054966786674104, 31: 26.961849982392298, 32: 27.81740390587261, 33: 28.702966206725606, 34: 29.494351422231187, 35: 30.332307692307694, 36: 31.070924163340496, 37: 31.791754554170662, 38: 32.51859903381642, 39: 33.33292720073104, 40: 34.13483146067416, 41: 34.9258337481334, 42: 35.61846352485475, 43: 36.26289517470882, 44: 36.920344456404735, 45: 37.680659670164914, 46: 37.97609561752988, 47: 38.4180790960452, 48: 38.9375, 49: 39.11602209944751, 50: 40.02962962962963, 51: 40.53398058252427, 52: 41.21917808219178, 53: 41.610169491525426, 54: 42.093023255813954, 55: 42.58064516129032, 56: 43.10526315789474, 57: 44.45454545454545, 58: 46.5, 59: 50.0}
# MNIST
data_mnist_tsne = {0: 0.0, 1: 0.0, 2: 0.7438440111420613, 3: 1.3480499837948792, 4: 2.0895482491312483, 5: 2.8102138525375038, 6: 3.5897111945477516, 7: 4.377848755574072, 8: 5.183048325088534, 9: 6.016185652315639, 10: 6.850302576220391, 11: 7.7029348757497855, 12: 8.553445638610473, 13: 9.430816711436247, 14: 10.321512980791166, 15: 11.217976559958501, 16: 12.110138280277583, 17: 13.024798620540288, 18: 13.93657432747057, 19: 14.854478932132519, 20: 15.77033625789035, 21: 16.692717011978495, 22: 17.62434032795125, 23: 18.577684562435444, 24: 19.513683294434117, 25: 20.46954814927112, 26: 21.4211021645927, 27: 22.37838609427637, 28: 23.33809527762329, 29: 24.3182038154912, 30: 25.277307131449206, 31: 26.22329386782773, 32: 27.192357638217334, 33: 28.152391641382195, 34: 29.105610658479947, 35: 30.063836751393648,
                   36: 31.019097166810294, 37: 31.98177859654999, 38: 32.95830169946855, 39: 33.937855266889436, 40: 34.894910437253934, 41: 35.85932713234173, 42: 36.8165902027527, 43: 37.7898795104419, 44: 38.74215273396873, 45: 39.70288190843088, 46: 40.681787912420546, 47: 41.663019110825026, 48: 42.61491126590691, 49: 43.55114609223971, 50: 44.47882624423101, 51: 45.434574128010226, 52: 46.35746327009342, 53: 47.28364528701342, 54: 48.19783729269386, 55: 49.08908744497733, 56: 49.966254826254826, 57: 50.83447256604471, 58: 51.72740707059225, 59: 52.62401036418598, 60: 53.46118041333085, 61: 54.269554455445544, 62: 55.09759450171821, 63: 55.912254901960786, 64: 56.94702467343977, 65: 57.89608938547486, 66: 59.293795620437955, 67: 60.885245901639344, 68: 62.3986013986014, 69: 63.58730158730159, 70: 66.28571428571429}
data_mnist_PCA = {0: 0.0, 1: 0.0, 2: 0.970044823439379, 3: 1.6475964306275188, 4: 2.581132792357587, 5: 3.3960787761561457, 6: 4.3306839221260125, 7: 5.240840270039982, 8: 6.174620167771455, 9: 7.111917417558141, 10: 8.04514471994468, 11: 8.987170464378424, 12: 9.928600246431648, 13: 10.867491733781108, 14: 11.81820527835952, 15: 12.766944739080163, 16: 13.708781328785408, 17: 14.661159707818559, 18: 15.604074034864846, 19: 16.550985172524488, 20: 17.49627187550712, 21: 18.43872435046543, 22: 19.38108853606028, 23: 20.329020952636476, 24: 21.271602037476818, 25: 22.204436920433587, 26: 23.15003613177471, 27: 24.090152589727058, 28: 25.02111359586289, 29: 25.95714920071048, 30: 26.88504356462462, 31: 27.82000147585138, 32: 28.744661358720805, 33: 29.66356557693794, 34: 30.565590372929822, 35: 31.49584263449999, 36: 32.40887111280407, 37: 33.33308072487644, 38: 34.2339799713877,
                  39: 35.15437084903967, 40: 36.04730507456711, 41: 36.94445393725109, 42: 37.843605119236, 43: 38.74468523038019, 44: 39.63418899506589, 45: 40.52764069587757, 46: 41.41810966168959, 47: 42.2864126059119, 48: 43.16249844983672, 49: 44.0384727878147, 50: 44.894767928335874, 51: 45.779584315638296, 52: 46.638075815738965, 53: 47.49395986555293, 54: 48.33434559292168, 55: 49.152511454267774, 56: 49.99922839506173, 57: 50.797402597402595, 58: 51.57759278088459, 59: 52.4332623227797, 60: 53.19245807628812, 61: 53.99607438016529, 62: 54.823869934721024, 63: 55.58496487819459, 64: 56.33247753530167, 65: 57.09155413138018, 66: 57.72045191193511, 67: 58.564671101256465, 68: 59.45124938755512, 69: 60.21206096752817, 70: 61.19723502304147, 71: 61.92672998643148, 72: 62.291489361702126, 73: 62.61423220973783, 74: 63.0354609929078, 75: 63.736111111111114, 76: 64.43333333333334, 77: 63.63636363636363, 78: 57.5}
data_mnist_UMAP = {0: 0.0, 1: 0.0, 2: 0.772353140151088, 3: 1.3775129760947438, 4: 2.0981661845492425, 5: 2.8026114623362672, 6: 3.565018596239806, 7: 4.3166358540951375, 8: 5.104598936018743, 9: 5.909880602583835, 10: 6.7330726245044925, 11: 7.573190257873957, 12: 8.422693091243652, 13: 9.298392558006915, 14: 10.177615112970138, 15: 11.066264058028882, 16: 11.95936678895948, 17: 12.870767797930165, 18: 13.78139364730957, 19: 14.709813084112149, 20: 15.633013402371068, 21: 16.579723415003787, 22: 17.522832629628745, 23: 18.474426751080617, 24: 19.42944524748675, 25: 20.399548946014995, 26: 21.37585967408612, 27: 22.349004032327848, 28: 23.313779038836675, 29: 24.287921169739352, 30: 25.26617722702829, 31: 26.22117302448378, 32: 27.18475890839216, 33: 28.153601847841777, 34: 29.13708145014976, 35: 30.133632809436858, 36: 31.112515253919085, 37: 32.07365456513184, 38: 33.053309991571034, 39: 34.02027942363743, 40: 34.981102590073796, 41: 35.94204849690201, 42: 36.919078732440376,
                   43: 37.89543749669831, 44: 38.85231979328951, 45: 39.847610812591356, 46: 40.802006018054165, 47: 41.773099046185955, 48: 42.74553371157145, 49: 43.73094131570591, 50: 44.68938508669425, 51: 45.68036877859421, 52: 46.67256299797949, 53: 47.683792151284415, 54: 48.679732882038145, 55: 49.68279569892473, 56: 50.71003066141043, 57: 51.67555447824506, 58: 52.679122664500404, 59: 53.663230757655555, 60: 54.68901209677419, 61: 55.72278815317865, 62: 56.76237096945834, 63: 57.82185015658877, 64: 58.840016944366, 65: 59.8737799834574, 66: 60.93387628466162, 67: 62.06878306878307, 68: 63.137227501397426, 69: 64.25057622653935, 70: 65.40515222482436, 71: 66.42006413192854, 72: 67.63730569948187, 73: 68.6683748169839, 74: 69.7321965897693, 75: 70.77073170731707, 76: 71.99108469539375, 77: 73.04681647940075, 78: 73.79328165374677, 79: 74.6896551724138, 80: 75.75, 81: 76.62992125984252, 82: 77.49438202247191, 83: 79.08771929824562, 84: 79.97368421052632, 85: 81.39285714285714, 86: 81.6470588235294, 87: 83.2}
data_mnist_Isomap = {0: 0.0, 1: 0.0, 2: 0.9493815724949599, 3: 1.6044355701347786, 4: 2.508083632973765, 5: 3.3202021067054894, 6: 4.240405319822672, 7: 5.1267289483251925, 8: 6.046520482267503, 9: 6.9550718696353995, 10: 7.873007985803016, 11: 8.789748447068153, 12: 9.707749505493936, 13: 10.634708487592187, 14: 11.562388524867169, 15: 12.48753362581018, 16: 13.423730144191767, 17: 14.357301673512339, 18: 15.286307261036292, 19: 16.215740937556205, 20: 17.15350618500893, 21: 18.096011306784874, 22: 19.025433795084993, 23: 19.972910204278435, 24: 20.91064342231813, 25: 21.8566369081621, 26: 22.806572870797982, 27: 23.752251155999026, 28: 24.707016178018087, 29: 25.656216585742083, 30: 26.596812060916264, 31: 27.546744125713438, 32: 28.50249189297774, 33: 29.451306130939997, 34: 30.40048556173938, 35: 31.35484906185148, 36: 32.31176187975554, 37: 33.271661641306125, 38: 34.23018502159403, 39: 35.1931371659037, 40: 36.1445152449469,
                     41: 37.09456632282435, 42: 38.063129440840285, 43: 39.020774004510365, 44: 39.984580722382596, 45: 40.93993152231169, 46: 41.90839354747303, 47: 42.852443649997824, 48: 43.82543286971331, 49: 44.777635258202714, 50: 45.73822838608657, 51: 46.68476800976801, 52: 47.67460211314698, 53: 48.6467588143987, 54: 49.5961546345263, 55: 50.56063373207926, 56: 51.52595085143265, 57: 52.48505154639175, 58: 53.46239771398883, 59: 54.3878065041855, 60: 55.341015392465344, 61: 56.295619721076406, 62: 57.22822378894701, 63: 58.166999334664006, 64: 59.11837761358277, 65: 60.114371708051166, 66: 61.078125, 67: 62.06086714841579, 68: 63.031496062992126, 69: 64.09114031369224, 70: 65.11571582346609, 71: 66.0083044982699, 72: 67.19245283018869, 73: 68.22446406052964, 74: 69.39298245614034, 75: 70.37259615384616, 76: 71.20748299319727, 77: 72.38095238095238, 78: 73.3177570093458, 79: 74.1923076923077, 80: 74.625, 81: 75.125, 82: 80.0}
data_mnist_MDS = {0: 0.0, 1: 0.0, 2: 0.9483724940719983, 3: 1.5983025882022865, 4: 2.49816012195763, 5: 3.288855129341267, 6: 4.19063998146531, 7: 5.04251539001013, 8: 5.927376626258703, 9: 6.7977488346239845, 10: 7.668985527511711, 11: 8.537974133246387, 12: 9.40405532980339, 13: 10.284678442470968, 14: 11.150626362420127, 15: 12.01624773960217, 16: 12.879689941534842, 17: 13.753938053855778, 18: 14.63656004371401, 19: 15.5198449509674, 20: 16.392714976321212, 21: 17.286404169550877, 22: 18.17314161121153, 23: 19.0693708059803, 24: 19.959622690521805, 25: 20.87034255298305, 26: 21.77703031753762, 27: 22.683117667284453, 28: 23.59805750798722, 29: 24.5268909829718, 30: 25.45108147883869, 31: 26.40375040117372, 32: 27.339152590355763, 33: 28.289030110749948, 34: 29.232846132867344, 35: 30.19694486468314, 36: 31.152884373255088, 37: 32.11560190225176, 38: 33.08858234601428, 39: 34.071364582676175, 40: 35.062199042270805, 41: 36.030694485757586, 42: 37.00109850422849, 43: 38.00419999679389, 44: 38.99738466009128,
                  45: 39.985833042776136, 46: 40.95617253346554, 47: 41.94701390080659, 48: 42.95128558417599, 49: 43.95072685539403, 50: 44.9743388834476, 51: 45.97340655272413, 52: 46.96903791485427, 53: 47.99244487056568, 54: 48.97208680270935, 55: 49.97748099044648, 56: 50.994841071725745, 57: 52.05432839632278, 58: 53.034495548961424, 59: 54.122168424693065, 60: 55.14237668161435, 61: 56.19792044492806, 62: 57.207247853296465, 63: 58.28118985126859, 64: 59.27628205128205, 65: 60.35499207606973, 66: 61.36558784676354, 67: 62.48773388773389, 68: 63.56833419288293, 69: 64.58018867924528, 70: 65.93275109170305, 71: 66.9767711962834, 72: 67.96557120500782, 73: 69.05364806866953, 74: 70.26512968299711, 75: 71.28947368421052, 76: 72.01401869158879, 77: 73.03067484662577, 78: 74.38524590163935, 79: 75.19318181818181, 80: 76.20967741935483, 81: 77.37209302325581, 82: 78.53333333333333, 83: 79.04347826086956, 84: 81.1, 85: 82.5625, 86: 83.15384615384616, 87: 84.63636363636364, 88: 86.33333333333333, 89: 86.42857142857143, 90: 85.25, 91: 87.5, 92: 89.0}

# for data in [data_coil_tsne, data_coil_PCA, data_coil_UMAP, data_coil_Isomap, data_coil_MDS]:
for data in [data_mnist_tsne, data_mnist_PCA, data_mnist_UMAP, data_mnist_Isomap, data_mnist_MDS]:

    keys = list(data.keys())
    for i in range(len(keys)-1, -1, -1):
        data[keys[i]+2] = data[keys[i]]
    del data[1]
    del data[0]
    # plt.plot(np.array(list(data.keys()))/max(list(data.keys())), np.array(
    #     list(data.values()))/max(list(data.values())))

    # plt.plot(np.array(list(data.keys()))/max(list(data.keys())),
    #          ((np.array(list(data.keys())) - 1.7)/(np.array(list(data.keys())))))
    # plt.vlines(2/max(list(data.keys())), 0, 1, colors='r', linestyles='dashed')
# plt.ylim(0, 1)
# plt.legend(["t-SNE", "PCA", "UMAP", "Isomap", "MDS"])
# plt.show()
# for data in [data_coil_tsne, data_coil_PCA, data_coil_UMAP, data_coil_Isomap, data_coil_MDS]:
# for data in [data_mnist_tsne, data_mnist_PCA, data_mnist_UMAP, data_mnist_Isomap, data_mnist_MDS]:
name = ['t-SNE', 'PCA', 'UMAP', 'Isomap', 'MDS']
colors = ['blue', 'purple', 'orange', 'red', 'grey']
# for i, data in enumerate([data_coil_tsne, data_coil_PCA, data_coil_UMAP, data_coil_Isomap, data_coil_MDS]):
for i, data in enumerate([data_mnist_tsne, data_mnist_PCA, data_mnist_UMAP, data_mnist_Isomap, data_mnist_MDS]):
    print(data)
    data = {k: v for k, v in sorted(data.items(), key=lambda item: item[0])}
    x = np.array(list(data.keys()))
    y = np.array(list(data.values()))
    plt.plot(x, y, label=name[i], color=colors[i])
x = np.arange(2, 100, 0.1)
plt.plot(x, ((x - 1.7)), label='y=x-1.7', color='black', linestyle='dotted')
plt.plot(x, x, label='y=x', color='black', linestyle='dashed')

plt.fill_between(x, x-1.7, x, color='orange', alpha=0.2,
                 label='worst than random embedding')
plt.fill_between(x, x-1.7, 0, color='green', alpha=0.2,
                 label='better than random embedding')
plt.fill_between(x, x, 100, color='red', alpha=0.2, label='impossible')

plt.legend()
plt.show()

for data in [data_mnist_PCA]:
    data = {k: v for k, v in sorted(data.items(), key=lambda item: item[0])}
    x = (np.array(list(data.keys()))-1)/max(list(data.keys()))
    y = np.array(list(data.values()))/list(data.keys()) - \
        ((np.array(list(data.keys())) - 1.7)/(np.array(list(data.keys()))))
    y2 = 1 - ((np.array(list(data.keys())) - 1.7) /
              (np.array(list(data.keys()))))
    y3 = 0 - ((np.array(list(data.keys())) - 1.7) /
              (np.array(list(data.keys()))))
    y4 = 0.2 - ((np.array(list(data.keys())) - 1.7) /
                (np.array(list(data.keys()))))
    y5 = 0.4 - ((np.array(list(data.keys())) - 1.7) /
                (np.array(list(data.keys()))))
    y6 = 0.6 - ((np.array(list(data.keys())) - 1.7) /
                (np.array(list(data.keys()))))
    y7 = 0.8 - ((np.array(list(data.keys())) - 1.7) /
                (np.array(list(data.keys()))))

    plt.plot(x, - y)
    plt.plot(x, - y2, alpha=0.5)
    plt.plot(x, - y3, alpha=0.5)
    plt.plot(x, - y4, alpha=0.5)
    plt.plot(x, - y5, alpha=0.5)
    plt.plot(x, - y6, alpha=0.5)
    plt.plot(x, - y7, alpha=0.5)
print(-y)
plt.hlines(0, 0, 1, colors='r', linestyles='dashed')
plt.vlines(1/max(list(data.keys())), -1, 1, colors='r', linestyles='dashed')
plt.show()

# for data in [data_coil_tsne, data_coil_PCA, data_coil_UMAP, data_coil_Isomap, data_coil_MDS]:
for data in [data_mnist_tsne, data_mnist_PCA, data_mnist_UMAP, data_mnist_Isomap, data_mnist_MDS]:
    data = {k: v for k, v in sorted(data.items(), key=lambda item: item[0])}
    x = (np.array(list(data.keys())))
    y = np.array(list(data.values()))/list(data.keys()) - \
        ((np.array(list(data.keys())) - 1.7)/(np.array(list(data.keys()))))

    plt.plot(x, - y)

x = np.arange(1, 95, 0.1)
y2 = 1 - (x - 1.7) / x
y3 = 0 - (x - 1.7) / x
y4 = 0.2 - (x - 1.7) / x
y5 = 0.4 - (x - 1.7) / x
y6 = 0.6 - (x - 1.7) / x
y7 = 0.8 - (x - 1.7) / x
y8 = 0.1 - (x - 1.7) / x
y9 = 0.3 - (x - 1.7) / x
y10 = 0.5 - (x - 1.7) / x
y11 = 0.7 - (x - 1.7) / x
y12 = 0.9 - (x - 1.7) / x

plt.plot(x, - y2, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y3, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y4, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y5, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y6, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y7, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y8, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y9, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y10, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y11, alpha=0.5, color='grey', linestyle='dashed')
plt.plot(x, - y12, alpha=0.5, color='grey', linestyle='dashed')

# plt.hlines(0.1, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.2, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.3, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.4, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.5, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.6, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.7, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.8, 0, 100, colors='r', linestyles='dashed')
# plt.hlines(0.9, 0, 100, colors='r', linestyles='dashed')
# add text to the plot
plt.text(95, 0.1-0.025, '0.1', fontsize=12, color='red')
plt.text(95, 0.2-0.025, '0.2', fontsize=12, color='red')
plt.text(95, 0.3-0.025, '0.3', fontsize=12, color='red')
plt.text(95, 0.4-0.025, '0.4', fontsize=12, color='red')
plt.text(95, 0.5-0.025, '0.5', fontsize=12, color='red')
plt.text(95, 0.6-0.025, '0.6', fontsize=12, color='red')
plt.text(95, 0.7-0.025, '0.7', fontsize=12, color='red')
plt.text(95, 0.8-0.025, '0.8', fontsize=12, color='red')
plt.text(95, 0.9-0.025, '0.9', fontsize=12, color='red')

plt.hlines(0, 0, 100, colors='r', linestyles='dashed')
plt.ylim(0, 0.5)
plt.xlim(1, 110)
plt.legend(["t-SNE", "PCA", "UMAP", "Isomap", "MDS"])
plt.show()
